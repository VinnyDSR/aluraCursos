require('dotenv').config();
const express = require('express');
const session = require('express-session');
const store = new session.MemoryStore();
const app = express();
const secrett = process.env.SECRET;


app.use(session({
    secret: secrett,
    cookie: { maxAge: 30000 },
    saveUninitialized: false,
    store
}));

app.use(express.json());
app.use(express.urlencoded({ extended: false }));

app.use((req, res, next) => {
    console.log(store);
    console.log(`${req.method} - ${req.url}`)
    next();
});

const users = [
    { name: 'Anson', age: 22 },
    { name: 'Kelvin', age: 21 },
    { name: 'Michelle', age: 22 },
];

const posts = [
    { title: 'My Favorite foods' },
    { title: 'My Favorite games' }
];

app.get('/', (req, res) => {
    res.send({
        msg: 'Hello!',
        user: {}
    });
});

app.get('/users', (req, res) => {
    res.status(200).send(users);
});

app.post('/users', (req, res) => {
    const user = req.body;
    users.push(user);
    res.status(200).send('Created User');
});

app.get('/users/:name', (req, res) => {
    const { name } = req.params;
    const user = users.find((user) => user.name === name);
    if (user) res.status(200).send(user);
    else res.status(404).send('Not Found');
})

app.get('/posts', (req, res) => {
    console.log(req.query);
    const { title } = req.query;
    if (title) {
        const post = posts.find((post) => post.title === title);
        if (post) res.status(200).send(post);
        else res.status(404).send('Not found');
    }
    res.status(200).send(posts);
});

function validateAuthToken(req, res, next) {
    console.log('Inside Validate Auth Token');
    const { authorization } = req.headers;
    if (authorization && authorization === '123') {
        next();
    } else {
        res.status(403).send({ msg: 'Forbidden. Incorrect Credentials' });
    }
}

app.post('/posts', validateAuthToken, (req, res) => {
    const post = req.body;
    post.push(post);
    res.status(201).send(post);
})

function validateCookie(req, res, next) {
    const { cookies } = req;
    if (cookies.includes('session_id')) {
        console.log('Session ID Exists.');
        if (cookies.session_id === '123456') next();
        else res.status(403).send({ msg: 'Not Authenticated' });
    } else res.status(403).send({ msg: 'Not Authenticated' });
}

app.get('/signin', (req, res) => {
    res.cookie('session_id', '123456');
    res.status(200).json({ msg: 'Logged In.' });
});

app.get('/protected', validateCookie, (req, res) => {
    res.status(200).send({ msg: 'You are authorized!' })
});

app.post('/login', (req, res) => {
    console.log(req.sessionID);
    const { username, password } = req.body;
    console.log(username, password)
    if (username && password) {
        if (req.session.authenticated) {
            request.json(req.session);
        } else {
            if (password === '123') {
                request.session.authenticated = true;
                req.session.user = { username, password };
                res.json(req.session);
            } else {
                res.status(403).json({ msg: 'Bad Credentials' });
            }
        }
    } else res.status(403).json({ msg: 'Bad Credentials' });
});

app.listen(3000, () => {
    console.log('Server listening on port 3000');
});